---
name: Deployment

on:
  workflow_dispatch:
    inputs:
      FUNCTION:
        description: "Which function should I perform?"
        required: true
        default: "delete failed"
        type: choice
        options:
          - "list all"
          - "list failed"
          - "delete all"
          - "delete failed"
      OWNER:
        description: "Owner"
        required: true
        type: string
        default: "dennykorsukewitz"
      REPOSITORY:
        description: "Repository"
        required: true
        type: string
        default: "dennykorsukewitz"
      ENVIRONMENT:
        description: "Environment (mame), if not specified all environments will be used."
        required: false
        type: string

permissions:
  actions: write
  contents: write

jobs:
  Get_Deployment_IDS:
    name: Get Deployment IDs
    runs-on: ubuntu-22.04
    outputs:
      DEPLOYMENT_IDS: ${{ steps.get_ids.outputs.DEPLOYMENT_IDS }}
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Get Deployment IDs
        id: get_ids
        run: |

          if [ "${{ inputs.ENVIRONMENT }}" = "" ]; then
            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | .id')


            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
            echo "Deployment IDs: ${DEPLOYMENT_IDS[@]}"
          else
            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | select(.environment=="${{ inputs.ENVIRONMENT }}") | .id')

            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}: ${{ inputs.ENVIRONMENT }}"
            echo "Deployment IDs: ${DEPLOYMENT_IDS[@]}"
          fi

          echo "::set-output name=DEPLOYMENT_IDS::$(printf '%s,' "${DEPLOYMENT_IDS[@]}")"

          echo "---"
          echo "Repository: ${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
          echo "Environment Name: ${{ inputs.ENVIRONMENT }}"
          echo "Deployment IDs: ${DEPLOYMENT_IDS[@]}"
          echo "---"


  List_All:
    name: List All Deployments
    needs: Get_Deployment_IDS
    if: ${{ github.event.inputs.FUNCTION == 'list all' }}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: List All Deployments
        run: |

          IFS=',' read -ra DEPLOYMENT_IDS <<< "${{ needs.Get_Deployment_IDS.outputs.DEPLOYMENT_IDS }}"

          echo "---"
          echo "All Deployments Runs:"
          echo "---"

          for DEPLOYMENT_ID in "${DEPLOYMENT_IDS[@]}"; do
            echo -e "Deployment ID: $DEPLOYMENT_ID\n"

            DEPLOYMENT=$(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments/"$DEPLOYMENT_ID" --paginate | jq -r '.workflow_runs[] | "ID: \(.id)\nName: \(.name)\nEnvironment: \(.environment)\nName: \(.name)\nDescription: \(.description)Created at: \(.created_at)\n"')

            # 1408607151
            # gh api -X GET /repos/dennykorsukewitz/MyPlayground/deployments/1408607151 --paginate | jq '. | "ID: \(.id)\nName: \(.environment)\nStatus: \(.status)\nConclusion: \(.conclusion)\nCreated at: \(.created_at)\n"'
            # gh api -X GET /repos/dennykorsukewitz/MyPlayground/deployments/1408607151 --paginate | jq '.'

            echo "$DEPLOYMENT"
            echo "---"
          done

  List_Failed:
    name: List Failed Deployments
    needs: Get_Deployment_IDS
    if: ${{ github.event.inputs.FUNCTION == 'list failed' }}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: List Failed Deployments
        run: |

          if [ "${{ inputs.ENVIRONMENT }}" = "" ]; then

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
          else

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | select(.environment=="${{ inputs.ENVIRONMENT }}") | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}: ${{ inputs.ENVIRONMENT }}"
          fi

          for DEPLOYMENT_ID in "${DEPLOYMENT_IDS[@]}"; do
            STATUS_ID=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/dennykorsukewitz/Znuny-QuickDelete/deployments/"$DEPLOYMENT_ID"/statuses | jq '.[] | select(.state=="failure") | .id')

            if [ -n "$STATUS_ID" ]; then
              echo "DEPLOYMENT ID: $DEPLOYMENT_ID"
              echo "STATUS ID: $STATUS_ID"
            fi
          done

  Delete_All:
    name: Delete All Deployments
    needs: Get_Deployment_IDS
    if: ${{ github.event.inputs.FUNCTION == 'delete all' }}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Delete All Deployments
        run: |

          if [ "${{ inputs.ENVIRONMENT }}" = "" ]; then

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
          else

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | select(.environment=="${{ inputs.ENVIRONMENT }}") | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}: ${{ inputs.ENVIRONMENT }}"
          fi

          for DEPLOYMENT_ID in "${DEPLOYMENT_IDS[@]}"; do

            echo "DEPLOYMENT ID: $DEPLOYMENT_ID"

            gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments/"$DEPLOYMENT_ID"
          done

  Delete_Failed:
    name: Delete Failed And Inactive Deployments
    needs: Get_Deployment_IDS
    if: ${{ github.event.inputs.FUNCTION == 'delete failed' }}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Delete Failed And Inactive Deployments
        run: |

          if [ "${{ inputs.ENVIRONMENT }}" = "" ]; then

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
          else

            mapfile -t DEPLOYMENT_IDS < <(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments | jq '.[] | select(.environment=="${{ inputs.ENVIRONMENT }}") | .id')
            echo "${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}: ${{ inputs.ENVIRONMENT }}"
          fi

          for DEPLOYMENT_ID in "${DEPLOYMENT_IDS[@]}"; do
            STATUS_ID=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/dennykorsukewitz/Znuny-QuickDelete/deployments/"$DEPLOYMENT_ID"/statuses | jq '.[] | select(.state=="failure" or .state=="inactive") | .id')

            if [ -n "$STATUS_ID" ]; then
              echo "DEPLOYMENT ID: $DEPLOYMENT_ID"
              echo "STATUS ID: $STATUS_ID"

              gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/deployments/"$DEPLOYMENT_ID"
            fi
          done
