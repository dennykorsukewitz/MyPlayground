---
name: Workflow

on:
  workflow_dispatch:
    inputs:
      FUNCTION:
        description: "Which function should I perform?"
        required: true
        default: "delete failed"
        type: choice
        options:
          - "run"
          - "list all"
          - "list failed"
          - "delete all"
          - "delete failed"
      OWNER:
        description: "Owner"
        required: true
        type: string
        default: "dennykorsukewitz"
      REPOSITORY:
        description: "Repository"
        required: true
        type: string
        default: "dennykorsukewitz"
      WORKFLOW_NAME:
        description: "Workflow, if not specified all workflows will be used."
        required: false
        type: string

permissions:
  actions: write
  contents: write

jobs:
  Get_Workflow_IDs:
    name: Get Workflow IDs
    runs-on: ubuntu-22.04
    outputs:
      WORKFLOW_IDS: ${{ steps.get_ids.outputs.WORKFLOW_IDS }}
    steps:
      - name: Get Workflow IDs
        id: get_ids
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mapfile -t WORKFLOW_IDs < <(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows | jq '.workflows[] | select(.name=="${{ inputs.WORKFLOW_NAME }}" // true) | .id')
          echo "WORKFLOW_IDS=$(printf '%s,' "${WORKFLOW_IDs[@]}") >> $GITHUB_OUTPUT"

          echo $(printf '%s,' "${WORKFLOW_IDs[@]}")

          # echo "::set-output name=workflow_ids::$(printf '%s,' "${WORKFLOW_IDs[@]}")"

          echo "---"
          echo "Repository: ${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}"
          echo "Workflow Name: ${{ inputs.WORKFLOW_NAME }}"
          echo "Workflow IDs: ${WORKFLOW_IDs[@]}"
          echo "---"

  Run:
    name: Run Workflow
    needs: Get_Workflow_IDs
    if: ${{ github.event.inputs.FUNCTION == 'run' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Run Workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra WORKFLOW_IDS <<< "${{ needs.Get_Workflow_IDs.outputs.workflow_ids }}"

          echo "---"
          echo "Running Workflows:"
          echo "---"

          for WORKFLOW_ID in "${WORKFLOW_IDS[@]}"; do
            echo "Workflow ID: $WORKFLOW_ID\n"

            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows/"$WORKFLOW_ID"/dispatches \
              -d '{"ref":"dev"}'

            echo "Workflow $WORKFLOW_ID triggered successfully."
          done

  List_All:
    name: List All Workflow Runs
    needs: Get_Workflow_IDs
    if: ${{ github.event.inputs.FUNCTION == 'list all' }}
    runs-on: ubuntu-22.04
    steps:
      - name: List All Workflow Runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_IDS: ${{needs.Get_Workflow_IDs.outputs.WORKFLOW_IDS}}
        run: |
          IFS=',' read -ra WORKFLOW_IDS2 <<< "${{ needs.Get_Workflow_IDs.outputs.WORKFLOW_IDS }}"

          echo "$WORKFLOW_IDS"
          echo "$WORKFLOW_IDS2"

          echo "---"
          echo "All Workflow Runs:"
          echo "---"

          for WORKFLOW_ID in "${WORKFLOW_IDS[@]}"; do
            echo "Workflow ID: $WORKFLOW_ID\n"

            RUNS=$(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows/"$WORKFLOW_ID"/runs --paginate | jq -r '.workflow_runs[] | "ID: \(.id)\nName: \(.name)\nStatus: \(.status)\nConclusion: \(.conclusion)\nCreated at: \(.created_at)\n"')

            echo "$RUNS"
            echo "---"
          done

  List_Failed:
    name: List Failed Workflow Runs
    needs: Get_Workflow_IDs
    if: ${{ github.event.inputs.FUNCTION == 'list failed' }}
    runs-on: ubuntu-22.04
    steps:
      - name: List Failed Workflow Runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra WORKFLOW_IDS <<< "${{ needs.Get_Workflow_IDs.outputs.workflow_ids }}"

          echo "---"
          echo "Failed Workflow Runs:"
          echo "---"

          for WORKFLOW_ID in "${WORKFLOW_IDS[@]}"; do
            echo "Workflow ID: $WORKFLOW_ID\n"

            FAILED_RUNS=$(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows/"$WORKFLOW_ID"/runs --paginate | jq -r '.workflow_runs[] | select(.conclusion=="failure") | "ID: \(.id)\nName: \(.name)\nStatus: \(.status)\nConclusion: \(.conclusion)\nCreated at: \(.created_at)\n"')

            echo "$FAILED_RUNS"
            echo "---"
          done

  Delete_All:
    name: Delete All Workflow Runs
    needs: Get_Workflow_IDs
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.FUNCTION == 'delete all' }}
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Delete All Workflow Runs
        run: |
          IFS=',' read -ra WORKFLOW_IDS <<< "${{ needs.Get_Workflow_IDs.outputs.workflow_ids }}"

          echo "---"
          echo "Deleting All Workflow Runs:"
          echo "---"

          for WORKFLOW_ID in "${WORKFLOW_IDS[@]}"; do
            echo "Workflow ID: $WORKFLOW_ID\n"

            RUN_IDS=$(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows/"$WORKFLOW_ID"/runs --paginate | jq -r '.workflow_runs[] | .id')

            for RUN_ID in $RUN_IDS; do
              gh api -X DELETE /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/runs/"$RUN_ID" --silent
              echo "Failed run $RUN_ID deleted."
            done

            echo "All runs for Workflow $WORKFLOW_ID deleted."
            echo "---"
          done

  Delete_Failed:
    name: Delete Failed Workflow Runs
    needs: Get_Workflow_IDs
    if: ${{ github.event.inputs.FUNCTION == 'delete failed' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Delete Failed Workflow Runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra WORKFLOW_IDS <<< "${{ needs.Get_Workflow_IDs.outputs.workflow_ids }}"

          echo "---"
          echo "Deleting Failed Workflow Runs:"
          echo "---"

          for WORKFLOW_ID in "${WORKFLOW_IDS[@]}"; do
            echo "Workflow ID: $WORKFLOW_ID\n"

            FAILED_RUN_IDS=$(gh api -X GET /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/workflows/"$WORKFLOW_ID"/runs --paginate | jq -r '.workflow_runs[] | select(.conclusion=="failure") | .id')

            for RUN_ID in $FAILED_RUN_IDS; do
              gh api -X DELETE /repos/${{ inputs.OWNER }}/${{ inputs.REPOSITORY }}/actions/runs/"$RUN_ID" --silent
              echo "Failed run $RUN_ID deleted."
            done

            echo "All failed runs for Workflow $WORKFLOW_ID deleted."
            echo "---"
          done
